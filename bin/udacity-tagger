#! /usr/bin/env python
import click
from collections import defaultdict
import os
import re
import subprocess

NETWORK = 'Udacity'

def call_ap(mp4path, show, season_num, episode_num, title):
    invoc = ['AtomicParsley',
             mp4path,
             '--TVShowName', show,
             '--TVSeasonNum', str(season_num),
             '--TVEpisodeNum', str(episode_num),
             '--title', title]
    try:
        subprocess.check_output(invoc, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as e:
        print("Error: {}".format(e.output))
        raise

@click.command()
@click.argument('showname')
@click.argument('season_rgx')
@click.argument('path', type=click.Path(exists=True, file_okay=False, dir_okay=True))
@click.option('-e', '--episode-name-rgx', default=None,
              help='The regex that will extract an episode\'s name from the file name')
def main(showname, season_rgx, path, episode_name_rgx):
    rgx = re.compile(season_rgx)
    episode_nums = defaultdict(lambda: 0)
    for season in filter(None, map(rgx.match, os.listdir(path))):
        season_no = int(season.group(1))
        print('Tagging season {}...'.format(season_no))
        try:
            episode_pfx = season.group(2).replace('_', ' ').strip()
        except IndexError:
            episode_pfx = ''
        for episode in os.listdir(os.path.join(path, season.string)):
            episode_nums[season_no] += 1  # set to 1
            ep = os.path.join(path, season.string, episode)
            en = episode
            if episode_name_rgx:
                print('Episode: {}, rgx: {}'.format(episode, episode_name_rgx))
                en = re.match(episode_name_rgx, episode).group(1)
            name = '{}: {}'.format(episode_pfx, en.replace('_', ' ').strip())
            call_ap(ep, showname, season_no, episode_nums[season_no], name)
            #print('{} = {}'.format(episode_nums[season_no], name))


if __name__ == '__main__':
    main()
