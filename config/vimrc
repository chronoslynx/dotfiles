set nocompatible               " be iMproved
filetype off                   " required!

if has('vim_starting')
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
set runtimepath+=~/.vim/bundle/vimproc.vim/

call neobundle#rc(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'shougo/neobundle.vim'

" Recommended to install
" After install, turn shell ~/.vim/bundle/vimproc, (n,g)make -f
" your_machines_makefile
NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }

"" Colors
NeoBundle 'chriskempson/base16-vim'
NeoBundle 'altercation/vim-colors-solarized'

"" Plugins
NeoBundle 'rking/ag.vim'
NeoBundle "Shougo/unite.vim"

NeoBundle 'rstacruz/sparkup', {'rtp': 'vim/'}

NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'bling/vim-airline'

" Completion interface
"NeoBundle "shougo/neocomplete.vim"

" Git setup
NeoBundle 'tpope/vim-fugitive'

" Colors hex values in CSS files
NeoBundle 'ap/vim-css-color'

" Autocloses if->endif, etc...
NeoBundle 'tpope/vim-endwise'

" Allows changing surrounding delimeters
NeoBundle 'tpope/vim-surround'

" Vim personal wiki. hooked into trunknotes for me
NeoBundle 'vim-scripts/vimwiki'

" Colors parens
NeoBundle 'kien/rainbow_parentheses.vim'

" Automatically closes quotes, parenthesis, brackets, etc.
NeoBundle 'Raimondi/delimitMate'

" looks for todos
NeoBundle 'vim-scripts/TaskList.vim'

" Matching if/endif, not just {} [] ()
NeoBundle 'vim-scripts/matchit.zip'

" Syntastic for syntax checking
NeoBundle 'scrooloose/syntastic'

" Window Management
NeoBundle 'spolu/dwm.vim'

"" Syntaxes
NeoBundle 'tpope/vim-git'
NeoBundle 'tpope/vim-haml'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'mmalecki/vim-node.js'
NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'ChrisYip/Better-CSS-Syntax-for-Vim'
NeoBundle 'othree/html5.vim'
NeoBundle 'nblock/vim-dokuwiki'
NeoBundle 'klen/python-mode'
NeoBundle 'rodjek/vim-puppet'
NeoBundle 'sophacles/vim-processing'


" Tab management
NeoBundle 'kien/tabman.vim'

NeoBundleCheck

" Configuration
syntax on        " turn on hilighting
set laststatus=2
set t_Co=256
set number
set showmode
set showcmd
set splitbelow
set splitright
"set visualbell
set hidden
set ignorecase
set smartcase
"filetype plugin on
filetype indent on
filetype plugin indent on
let mapleader = ","
"let LocalLeader = ";"
noremap <leader>w :w<CR>
noremap <leader>W :w!sudo tee %
noremap <leader>q :q<CR>
noremap <leader>ev :vsplit ./
noremap <leader>eh :vsplit ./
nnoremap ' `
nnoremap <Leader>G <Plug>(golden_ratio_resize)

nnoremap ` '
nnoremap <Leader>S :%s//<left>
inoremap jj <Esc>

set backup
set autowrite
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backspace=indent,eol,start

" Highlight search terms...
set hlsearch
set incsearch
set shortmess=atI
set modelines=0
set autoindent
set wrap

"" TABBING
set tabstop=4
" Set soft tabs equal to 4 spaces.
set softtabstop=4
" Set auto indent spacing.
set shiftwidth=4
" automatically change directories when opening files
" set autochdir
" " Shift to the next round tab stop.
set shiftround
set smartindent
set smarttab
set expandtab
set nolist
"
" List of characters to show instead of whitespace.
set listchars=tab:▸\ ,eol:¬,trail:⌴,extends:❯,precedes:❮
let &showbreak=nr2char(8618).' '
set linebreak
set ttyfast
set ruler
set showmatch
set matchtime=3
set matchpairs+=<:>
set printoptions+=syntax:y
set printoptions+=number:y
set cf
set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
" set nofoldenable

set wildmenu

" Enable completion on tab.
set wildchar=<Tab>

" Insert mode completion.
set completeopt=longest,menu,preview

" Wildcard expansion completion.
set wildmode=list:longest,list:full

" Keyword completion for when Ctrl-P and Ctrl-N are pressed.
set complete=.,t

" Completion Ignored Files -----------------------------------------------

" VCS directories.
set wildignore+=.hg,.git,.svn

" LaTeX intermediate files.
set wildignore+=*.aux,*.out,*.toc

" Binary images.
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg

" Lua byte code.
set wildignore+=*.luac

" Compiled object files.
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest

" Python byte code.
set wildignore+=*.pyc

" Compiled spelling lists.
set wildignore+=*.spl

" Backup, auto save, swap, undo, and view files.
set wildignore+=*~,#*#,*.sw?,%*,*=

" Mac OS X.
set wildignore+=*.DS_Store

"set runtimepath+=~/.vim.local
"let $PAGER=''
colorscheme base16-default
set background=dark
call togglebg#map("<F6>")
let g:solarized_termcolors=16
set t_Co=16

if has ('mouse')
    set mouse=a
    set mousemodel=popup_setpos
    " Hide mouse while typing.
    set mousehide"
    if &term =~ "xterm" || &term =~ "screen"
        set ttymouse=xterm2
    endif
endif

"" Use ctrl-[hjkl] to select the active split!
" nmap <silent> <c-k> :wincmd k<CR>
" nmap <silent> <c-j> :wincmd j<CR>
" nmap <silent> <c-h> :wincmd h<CR>
" nmap <silent> <c-l> :wincmd l<CR>

" Fold opening and closing
nmap <leader>. za
map <leader>. za

set clipboard=unnamed
"
" Yank text to the OS X clipboard
noremap <leader>y "*y
noremap <leader>yy "*Y

" Preserve indentation while pasting text from the OS X clipboard
noremap <leader>p :set paste<CR>:put  *<CR>:set nopaste<CR>

" Map :tabnext and :tabprevious to make tab hopping easy
nnoremap <C-h> :tabp<CR>
nnoremap <C-l> :tabn<CR>
nnoremap <leader>nt :tabnew ./

" kill all trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

let g:html_indent_inctags = "html,body,head,tbody,div"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

let g:vimwiki_list = [
            \ {'path': '~/Dropbox/trunksync/notes/ ', 'index': 'HomePage', 'path_html': '~/trunknotes_html', 'ext': '.markdown', 'auto_export': 0}
            \ ]
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"
let g:extradite_showhash = 1
let g:ctrlp_working_path_mode = 2
let g:ctrlp_root_markers = ['.git']
let g:ctrlp_max_height = 10
let g:ctrlp_persistent_input = 0
let g:ctrlp_lazy_update = 1
let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir']

let g:syntastic_quiet_warnings = 0

" Do not validate the following file types.
let g:syntastic_disabled_filetypes = ['html', 'python']
"
" Set the display format.
let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
let g:syntastic_always_populate_loc_list=0

let g:EasyMotion_leader_key = ';'

"" Python-Mode setup
" disable pylint on every save
"let g:pymode_lint_write = 0
" Press <leader>d to show docs
let g:pymode_doc_key = '<leader>d'


"" AUTOCOMMANDS
au VimResized * exe "normal! \<c-w>="
aug cursorline
    au!
    au BufEnter * set cursorline
    au BufLeave * set nocursorline
    au InsertEnter * set nocursorline
    au InsertLeave * set cursorline
aug end

" Stop putting python comments at the beginning of a line
au! FileType python setl nosmartindent

" Save and load fold states
"au BufWinLeave * mkview
"au BufWinEnter * silent loadview

"" NeoComplete
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
"" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
"" Use smartcase.
let g:neocomplete#enable_smart_case = 1
"" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
"
"" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
            \ 'default' : '',
            \ 'vimshell' : $HOME.'/.vimshell_hist',
            \ 'scheme' : $HOME.'/.gosh_completions'
            \ }
"
"" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
"

"" Unite.vim
" Act like ctrlp.vim
nnoremap <C-p> :Unite file_rec/async<cr>
nnoremap <space>/ :Unite grep:.<cr>

" Buffer swapping like lustyjuggler
nnoremap <space>s :Unite -quick-match buffer<cr>
" Use ag for search
if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
    let g:unite_source_grep_recursive_opt = ''
endif
