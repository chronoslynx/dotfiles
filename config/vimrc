set nocompatible               " be iMproved
filetype off                   " required!

plug#begin()
"" Colors
Plug 'chriskempson/base16-vim'
Plug 'altercation/vim-colors-solarized'

"" Plugins
Plug "Shougo/unite.vim"
Plug "kana/vim-operator-user"
Plug "rhysd/vim-clang-format"

Plug 'rstacruz/sparkup', {'rtp': 'vim/'}

" Plug 'Lokaltog/vim-easymotion'
Plug 'bling/vim-airline'
Plug 'jordwalke/flatlandia'


" Git setup
Plug 'tpope/vim-fugitive'

" Colors hex values in CSS files
"Plug 'ap/vim-css-color'

" Autocloses if->endif, etc...
Plug 'tpope/vim-endwise'

" Allows changing surrounding delimeters
Plug 'tpope/vim-surround'

" Vim personal wiki. hooked into trunknotes for me
Plug 'vim-scripts/vimwiki'

" Colors parens
Plug 'kien/rainbow_parentheses.vim'

" Automatically closes quotes, parenthesis, brackets, etc.
Plug 'Raimondi/delimitMate'

" looks for todos
"Plug 'vim-scripts/TaskList.vim'

" Matching if/endif, not just {} [] ()
"Plug 'vim-scripts/matchit.zip'

" Syntastic for syntax checking
Plug 'scrooloose/syntastic'
" TODO: Disable signs in merlin/syntastic, and only use the VimHint
" strategy of
" underlining *just* the region of error.
let g:syntastic_enable_signs=0
let g:syntastic_always_populate_loc_list=1
let g:syntastic_loc_list_height=15
" let g:syntastic_warning_symbol=""
" let g:syntastic_error_symbol=""
" highlight link SyntasticErrorLine Spellbad
" highlight link SyntasticWarningLine Spellbad
" highlight link SyntasticStyleErrorLine Spellbad
" highlight link SyntasticStyleWarningLine Spellbad
" For OCaml (which uses syntastic + merlin) always show the sign gutter
" otherwise it's jarring when it appears.
" autocmd FileType ocaml sign define dummy
" autocmd FileType ocaml execute 'sign place 9999 line=1 name=dummy
" buffer=' . bufnr(')
" =============================================================================="'

" Allow quick commenting/uncommenting of lines
Plug 'scrooloose/nerdcommenter'

"" Syntaxes
Plug 'cespare/vim-toml'
Plug 'tpope/vim-git'
Plug 'pangloss/vim-javascript'
Plug 'mmalecki/vim-node.js'
Plug 'vim-ruby/vim-ruby'
Plug 'ChrisYip/Better-CSS-Syntax-for-Vim'
Plug 'othree/html5.vim'
Plug 'klen/python-mode'
Plug 'rodjek/vim-puppet'
Plug 'sophacles/vim-processing'
Plug 'vim-pandoc/vim-pantondoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'chilicuil/vim-sml-coursera'

" Ocaml
if !empty(system('which opam'))
    " =================================== Merlin
    " ================================
    let s:ocamlmerlin=substitute(system('opam config var share'),'\n$','','') . "/ocamlmerlin"
    execute "set rtp+=".s:ocamlmerlin."/vim"
    execute "set rtp+=".s:ocamlmerlin."/vimbufsync"
    let g:syntastic_ocaml_checkers=['merlin']
else
    " TODO: figure out opam for windows
endif
Plug "def-lkb/ocp-indent-vim"

" Haskell
Plug 'dag/vim2hs'
Plug 'eagletmt/ghcmod-vim'
Plug 'eagletmt/neco-ghc'

" Javascript
Plug 'Shutnik/jshint2.vim'

" Tab management
Plug 'kien/tabman.vim'

plug#end()

" Configuration
syntax on        " turn on hilighting
set laststatus=2
set t_Co=256
set number
set showmode
set showcmd
set splitbelow
set splitright
"set visualbell
set hidden
set ignorecase
set smartcase
"filetype plugin on
filetype indent on
filetype plugin indent on

let mapleader = ","
"let LocalLeader = ";"
noremap <leader>w :w<CR>
noremap <leader>W :w!sudo tee %
noremap <leader>q :q<CR>
noremap <leader>ev :vsplit ./
noremap <leader>eh :split ./

noremap <leader>uf :Unite file<CR>
noremap <leader>ub :Unite buffer<CR>

nnoremap ' `
nnoremap <Leader>G <Plug>(golden_ratio_resize)

nnoremap ` '
nnoremap <Leader>S :%s//<left>
inoremap jj <Esc>

set backup
set autowrite
set backupdir=~/.vim-tmp,~/.tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,/tmp
set backspace=indent,eol,start

" Highlight search terms...
set hlsearch
set incsearch
set shortmess=atI
set modelines=0
set autoindent
set wrap

"" TABBING
set tabstop=4
" Set soft tabs equal to 4 spaces.
set softtabstop=4
" Set auto indent spacing.
set shiftwidth=4
" automatically change directories when opening files
" set autochdir
" " Shift to the next round tab stop.
set shiftround
set smartindent
set smarttab
set expandtab
set nolist
"
" List of characters to show instead of whitespace.
set listchars=tab:▸\ ,eol:¬,trail:⌴,extends:❯,precedes:❮
let &showbreak=nr2char(8618).' '
set linebreak
set ttyfast
set ruler
set showmatch
set matchtime=3
set matchpairs+=<:>
set printoptions+=syntax:y
set printoptions+=number:y
set cf
set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
" set nofoldenable

set wildmenu

" Enable completion on tab.
set wildchar=<Tab>

" Insert mode completion.
set completeopt=longest,menu,preview

" Wildcard expansion completion.
set wildmode=list:longest,list:full

" Keyword completion for when Ctrl-P and Ctrl-N are pressed.
set complete=.,t

" Completion Ignored Files -----------------------------------------------

" VCS directories.
set wildignore+=.hg,.git,.svn

" LaTeX intermediate files.
set wildignore+=*.aux,*.out,*.toc

" Binary images.
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg

" Lua byte code.
set wildignore+=*.luac

" Compiled object files.
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest

" Python byte code.
set wildignore+=*.pyc

" Compiled spelling lists.
set wildignore+=*.spl

" Backup, auto save, swap, undo, and view files.
set wildignore+=*~,#*#,*.sw?,%*,*=

" Mac OS X.
set wildignore+=*.DS_Store

"set runtimepath+=~/.vim.local
"let $PAGER=''
colorscheme flatlandia "base16-ocean
set background=dark
call togglebg#map("<F6>")
"let g:solarized_termcolors=16
set t_Co=16

if has ('mouse')
    set mouse=a
    set mousemodel=popup_setpos
    " Hide mouse while typing.
    set mousehide"
    if &term =~ "xterm" || &term =~ "screen"
        set ttymouse=xterm2
    endif
endif

"" Use ctrl-[hjkl] to select the active split
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

" Fold opening and closing
nmap <leader>. za
map <leader>. za

" Tab maneuvering
nmap <leader>tn :tabnext<CR>
map <leader>tn :tabnext<CR>
nmap <leader>tp :tabprevious<CR>
map <leader>tp :tabprevious<CR>

" Airline setup for statusbar
let g:airline#extensions#tabline#enabled = 1

"let g:airline_powerline_fonts = 1
set laststatus=2
" Disable truncation
let g:airline#extensions#default#section_truncate_width = {}

setlocal omnifunc=necoghc#omnifunc

set clipboard=unnamed
"
" Yank text to the OS X clipboard
noremap <leader>y "*y
noremap <leader>yy "*Y

" Preserve indentation while pasting text from the OS X clipboard
noremap <leader>p :set paste<CR>:put  *<CR>:set nopaste<CR>

" Map :tabnext and :tabprevious to make tab hopping easy
" nnoremap <C-h> :tabp<CR>
" nnoremap <C-l> :tabn<CR>
nnoremap <leader>nt :tabnew ./

" kill all trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

" Auto-lint haskell sources with GhcMod
autocmd BufWritePost *.hs GhcModCheckAndLintAsync

let g:html_indent_inctags = "html,body,head,tbody,div"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

let g:vimwiki_list = [
    \ {'path': '~/Dropbox/trunksync/notes/', 'index': 'HomePage', 'path_html': '~/trunknotes_html', 'ext': '.markdown', 'auto_export': 0}
    \ ]

let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"
let g:extradite_showhash = 1

let g:syntastic_quiet_messages = {'level': 'warnings'}

" Do not validate the following file types.
let g:syntastic_disabled_filetypes = ['html', 'python']
"
" Set the display format.
let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
let g:syntastic_always_populate_loc_list=0

let g:EasyMotion_leader_key = ';'

"" Python-Mode setup
" disable pylint on every save
"let g:pymode_lint_write = 0
" Press <leader>d to show docs
let g:pymode_doc_key = '<leader>d'


"" JSHint
let jshint2_save = 1
" show next jshint error
nnoremap <silent><F2> :lnext<CR>
inoremap <silent><F2> <C-O>:lnext<CR>
vnoremap <silent><F2> :lnext<CR>

" show previous jshint error
nnoremap <silent><F3> :lprevious<CR>
inoremap <silent><F3> <C-O>:lprevious<CR>
vnoremap <silent><F3> :lprevious<CR>


"" AUTOCOMMANDS
au VimResized * exe "normal! \<c-w>="
aug cursorline
    au!
    au BufEnter * set cursorline
    au BufLeave * set nocursorline
    au InsertEnter * set nocursorline
    au InsertLeave * set cursorline
aug end

" Stop putting python comments at the beginning of a line
au! FileType python setl nosmartindent
au Filetype yaml setl ts=2 sw=2 expandtab
au BufNewFile,BufRead *.txt setl filetype=pandoc
" Save and load fold states
"au BufWinLeave * mkview
"au BufWinEnter * silent loadview


"" Unite.vim
" Act like ctrlp.vim
nnoremap <C-p> :Unite file_rec/async<cr>
nnoremap <space>/ :Unite grep:.<cr>

" Buffer swapping like lustyjuggler
nnoremap <space>s :Unite -quick-match buffer<cr>

" Use ag for search
if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
    let g:unite_source_grep_recursive_opt = ''
endif

nnoremap <silent> <leader>g :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
if executable('pt')
  let g:unite_source_grep_command = 'pt'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
endif

" Markdown
"au BufEnter *.md setlocal foldexpr=MarkdownLevel()
"au BufEnter *.md setlocal foldmethod=expr

" Clang-Format setup
let g:clang_format#code_style = 'llvm'
let g:clang_format#command = 'clang-format-3.5'
"let g:clang_format#auto_format = 1
autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
