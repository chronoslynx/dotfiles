[user]
    name = Tim Deeb-Swihart
[color]
    ui = true
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[alias]
# http://haacked.com/archive/2014/07/28/github-flow-aliases/
    up = !git pull --rebase --prune $@ && git submodule update --init --recursive
    cob = checkout -b
    save = !git add -A && git commit -m 'SAVEPOINT'
    wip = !git add -u && git commit -m "WIP"
    undo = reset HEAD~1 --mixed
    amend = commit -a --amend
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
    br = branch
    hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
    type = cat-file -t
    dump = cat-file -p
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

  # add
    a = add # add
    ap = add --patch # stage commits chunk by chunk

  # branch
    b = branch -v # branch (verbose)

  # commit
    c = commit -m # commit with message
    ca = commit -am # commit all with message
    ci = commit # commit
    cm = commit -m # with message
    amend = commit --amend # ammend your last commit
    ammend = commit --amend # ammend your last commit

  # checkout
    co = checkout # checkout
    nb = checkout -b # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # cherry-pick
    cp = cherry-pick -x # grab a change from a branch

  # diff
    d = difftool --no-symlinks --dir-diff
    dc = diff --cached # diff staged changes
    last = diff HEAD^ # diff last committed change

  # fetch
    f = fetch
    fu = fetch upstream

  # gerrit aliases
    gerr = push origin HEAD:refs/for/master

  # log
    l = log --graph --date=short
    changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
    short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
    changelog = log --pretty=format:\" * %s\"
    shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

  # merge
    m = merge
    mum = merge upstream/master

  # pull
    pl = pull # pull

  # push
    ps = push # push

  # rebase
    rc = rebase --continue # continue rebase
    rs = rebase --skip # skip rebase

  # remote
    r = remote -v # show remotes (verbose)

  # reset
    unstage = reset HEAD # remove files from index (tracking)
    uncommit = reset --soft HEAD^ # go back before last commit, with files in uncommitted state
    filelog = log -u # show changes to a file
    mt = mergetool # fire up the merge tool

  # stash
    ss = stash # stash changes
    sl = stash list # list stashes
    sa = stash apply # apply stash (restore changes)
    sd = stash drop # drop stashes (destory changes)

  # status
    s = status -sb # status
    st = status -sb # status
    stat = status -sb # status

  # tag
    t = tag -n # show tags with <n> lines of each tag message

[format]
    pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[mergetool]
    prompt = false
[mergetool "mvimdiff"]
    cmd="mvim -c 'Gdiff' $MERGED" # use fugitive.vim for 3-way merge
    keepbackup=false
[merge]
    summary = true
    verbosity = 1
    tool = ediff
[apply]
  #whitespace = nowarn
  #ignorewhitespace = change
[branch]
    autosetupmerge = true
[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
    default = tracking
[core]
    autocrlf = input
    editor = emacsclient
    excludesfile = ~/dotfiles/gitignore
[advice]
    statusHints = false
[diff]
    tool = kitty
    guitool = kitty.gui
[difftool]
    prompt = false
    trustExitCode = true
[difftool "kitty"]
    cmd = kitty +kitten diff $LOCAL $REMOTE
[difftool "kitty.gui"]
    cmd = kitty kitty +kitten diff $LOCAL $REMOTE
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
    mnemonicprefix = true
[rerere]
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
    enabled = true
[help]
    autocorrect = 1
[mergetool "ediff"]
    cmd = emacsclient -c -a \"\"  --eval \"(ediff-merge-files-with-ancestor \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" nil \\\"$MERGED\\\")\"

